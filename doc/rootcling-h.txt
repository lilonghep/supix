This program generates the dictionaries needed for performing I/O of        
classes.                                                                    
In addition rootcling can generate the Streamer(),                          
TBuffer &operator>>() and ShowMembers() methods for ROOT classes,           
i.e. classes using the ClassDef and ClassImp macros.                        
                                                                            
Rootcling can be used like:                                                 
                                                                            
 rootcling TAttAxis.h[{+,-}][!] ... [LinkDef.h] > AxisDict.cxx              
                                                                            
or                                                                          
                                                                            
 rootcling [-v][-v0-4] [-f] [out.cxx] [opts] file1.h[+][-][!] file2.h[+][-][!] ...[LinkDef.h]
                                                                            
The difference between the two is that in the first case only the           
Streamer() and ShowMembers() methods are generated while in the             
latter case a complete compileable file is generated (including             
the include statements). The first method also allows the                   
output to be appended to an already existing file (using >>).               
The optional - behind the header file name tells rootcling to not           
generate the Streamer() method. A custom method must be provided            
by the user in that case. For the + and ! options see below.                
By default the output file will not be overwritten if it exists.            
Use the -f (force) option to overwite the output file. The output           
file must have one of the following extensions: .cxx, .C, .cpp,             
.cc, .cp.                                                                   
The flags -rml and -rmf are used for the rootmaplib and the rootmap file    
respectively. The rootmap file option can be omitted. In this case, the name
is inferred from the name of the root map library.                          
The flag -s must be followed by the name of the library that will           
contain the object file corresponding to the dictionary produced by         
this invocation of rootcling.  The name will be used as the stem            
for the name of the precompiled module generated by this                    
invocation of rootcling.                                                    
The flag -m must be followed by the name (absolute path or relative         
to the current path) of a pcm file which will be loaded before any          
header files.                                                               
The pcm file (module) produced by this invocation of rootcling will         
not include any of the declarations already included in the pcm             
files loaded via -m.  There can be more than one -m.                        
The flag --lib-list-prefix=xxx can be used to produce a list of             
libraries needed by the header files being parsed. Rootcling will           
read the content of xxx.in for a list of rootmap files (see                 
rlibmap). Rootcling will read these files and use them to deduce a          
list of libraries that are needed to properly link and load this            
dictionary. This list of libraries is saved in the first line of the        
file xxx.out; the remaining lines contains the list of classes for          
which this run of rootcling produced a dictionary.                          
This feature is used by ACliC (the automatic library generator).            
The verbose flags have the following meaning:                               
     -v   Display all messages                                              
     -v0  Display no messages at all.                                       
     -v1  Display only error messages (default).                            
     -v2  Display error and warning messages.                               
     -v3  Display error, warning and note messages.                         
     -v4  Display all messages                                              
The option -p, -c, -l, -cint, -reflex and -gccxml are deprecated            
and currently ignored.                                                      
                                                                            
Before specifying the first header file one can also add include            
file directories to be searched and preprocessor defines, like:             
  -I$MYPROJECT/include -DDebug=1                                            
                                                                            
The (optional) file LinkDef.h looks like:                                   
                                                                            
#ifdef __CINT__                                                             
                                                                            
#pragma link off all globals;                                               
#pragma link off all classes;                                               
#pragma link off all functions;                                             
                                                                            
#pragma link C++ class TAxis;                                               
#pragma link C++ class TAttAxis-;                                           
#pragma link C++ class TArrayC-!;                                           
#pragma link C++ class AliEvent+;                                           
                                                                            
#pragma link C++ function StrDup;                                           
#pragma link C++ function operator+(const TString&,const TString&);         
                                                                            
#pragma link C++ global gROOT;                                              
#pragma link C++ global gEnv;                                               
                                                                            
#pragma link C++ enum EMessageTypes;                                        
                                                                            
#endif                                                                      
                                                                            
This file tells rootcling for which classes the method interface            
stubs should be generated. A trailing - in the class name tells             
rootcling to not generate the Streamer() method. This is necessary          
for those classes that need a customized Streamer() method.                 
A trailing ! in the class name tells rootcling to not generate the          
operator>>(TBuffer &b, MyClass *&obj) function. This is necessary to        
be able to write pointers to objects of classes not inheriting from         
TObject. See for an example the source of the TArrayF class.                
If the class contains a ClassDef macro, a trailing + in the class           
name tells rootcling to generate an automatic Streamer(), i.e. a            
streamer that let ROOT do automatic schema evolution. Otherwise, a          
trailing + in the class name tells rootcling to generate a ShowMember       
function and a Shadow Class. The + option is mutually exclusive with        
the - option. For new classes the + option is the                           
preferred option. For legacy reasons it is not yet the default.             
When the linkdef file is not specified a default version exporting          
the classes with the names equal to the include files minus the .h          
is generated.                                                               
                                                                            
*** IMPORTANT ***                                                           
1) LinkDef.h must be the last argument on the rootcling command line.       
2) Note that the LinkDef file name MUST contain the string:                 
   LinkDef.h, Linkdef.h or linkdef.h, i.e. NA49_LinkDef.h is fine           
   just like, linkdef1.h. Linkdef.h is case sensitive.                      
                                                                            
The default constructor used by the ROOT I/O can be customized by           
using the rootcling pragma:                                                 
   #pragma link C++ ioctortype UserClass;                                   
For example, with this pragma and a class named MyClass,                    
this method will called the first of the following 3                        
constructors which exists and is public:                                    
   MyClass(UserClass*);                                                     
   MyClass(TRootIOCtor*);                                                   
   MyClass(); // Or a constructor with all its arguments defaulted.         
                                                                            
When more than one pragma ioctortype is used, the first seen has            
priority.  For example with:                                                
   #pragma link C++ ioctortype UserClass1;                                  
   #pragma link C++ ioctortype UserClass2;                                  
We look in the following order:                                             
   MyClass(UserClass1*);                                                    
   MyClass(UserClass2*);                                                    
   MyClass(TRootIOCtor*);                                                   
   MyClass(); // Or a constructor with all its arguments defaulted.         
                                                                            
NOTA BENE: the dictionaries that will be used within the same project must  
have unique names.                                                          
                                                                            
Synopsis of the options:                                                    
                                                                            
 -cap	Capabilities File                                                    
   Specify the output capabilities filename. Used in presence of the Seal   
   plugin manager.                                                          
                                                                            
 -rmf	Rootmap file name                                                    
  Name of the rootmap file. In order to be picked up by ROOT it must have   
  .rootmap extension.                                                       
                                                                            
 -rml	Rootmap library name                                                 
  Specify the name of the library which contains the autoload keys. This    
  switch can be specified multiple times to autoload several libraries in   
  presence of a particular key.                                             
                                                                            
 -split	Split the dictionary                                               
  Split the dictionary in two, putting the ClassDef functions in a separate 
  file.                                                                     
                                                                            
 -s	Target library name                                                    
  The flag -s must be followed by the name of the library that will         
  contain the object file corresponding to the dictionary produced by       
  this invocation of rootcling.                                             
  The name takes priority over the one specified for the rootmapfile.       
  The name influences the name of the created pcm:                          
   1) If it is not specified, the pcm is called libINPUTHEADER_rdict.pcm    
   2) If it is specified, the pcm is called libTARGETLIBRARY_rdict.pcm      
      Any "liblib" occurence is transformed in the expected "lib".      
   3) If this is specified in conjunction with --multiDict, the output is   
      libTARGETLIBRARY_DICTIONARY_rdict.pcm                                 
                                                                            
 -multiDict	Enable support for multiple pcms in one library                
  Needsa the -s flag. See its documentation.                                
                                                                            
 -inlineInputHeader	Add the argument header to the code of the dictionary  
  This allows the header to be inlined within the dictionary.               
                                                                            
 -interpreteronly	No IO information in the dictionary                      

